#!/bin/bash

set -e

TARGET_PREFIX="/target"
DATA_DIRECTORY="/var/lib/mysql"

setDefaults() {
	if [ -z "$MYSQL_USER" ] ; then
		echo "WARNING: Running with default user."
	else
		echo "Connecting as $MYSQL_USER"
		USER=(--user "$MYSQL_USER")
	fi

	if [ -z "$MYSQL_PASSWORD" ] ; then
		echo "WARNING: Running without password."
	else
		echo "Connecting with password"
		PASSWORD=(--password "$MYSQL_PASSWORD")
	fi

	if [ -z "$MYSQL_HOST" ] ; then
		echo "WARNING: Connecting to default host 'source', make sure to set links"
		MYSQL_HOST="target"
	else
		echo "Connecting to host $MYSQL_HOST"
	fi

	if [ -z "$MYSQL_PORT" ] ; then
		MYSQL_PORT="3306"
		echo "WARNING: Connecting to default port '3306'"
	else
		echo "Connecting to port $MYSQL_PORT"
	fi

}

backupRancher() {
	
	echo "Backing up rancher stack"

	local METADATA_URL="http://rancher-metadata/2015-07-25"
	local STACK=$(curl -s $METADATA_URL/self/service/links | sed 's/%2F.*//')
	local SERVICE=$(curl -s $METADATA_URL/self/service/links | sed 's/[^%]*%2F//')
	local TARGET_DIRECTORY="$1"
  
	if [ -z "$RANCHER_URL" -o -z "$RANCHER_ACCESS_KEY" -o -z "$RANCHER_SECRET_KEY" ] ; then
		echo "No rancher access data set, not backing up {docker,rancher}-compose.yml files"
		return
	fi

	if [ -z "$RANCHER_CLI_VERSION" ] ; then
		echo "Defaulting to rancher-cli Version v0.4.1"
		RANCHER_CLI_VERSION="v0.4.1"
	fi

	RANCHER_CLI_DIRECTORY="/opt/rancher/${RANCHER_CLI_VERSION}" 
	if [ ! -d "$RANCHER_CLI_DIRECTORY" ] ; then
		mkdir -p "$RANCHER_CLI_DIRECTORY"
	fi

	if [ ! -f "$RANCHER_CLI_DIRECTORY/rancher" ] ; then
		echo "Downloading rancher cli $RANCHER_CLI_VERSION"
		curl -s "https://releases.rancher.com/cli/${RANCHER_CLI_VERSION}/rancher-linux-amd64-${RANCHER_CLI_VERSION}.tar.gz" \
			| tar xvz -C "$RANCHER_CLI_DIRECTORY" --strip-components=2
	fi

	$RANCHER_CLI_DIRECTORY/rancher export "${STACK}"
	cp ${STACK}/{docker,rancher}-compose.yml "${TARGET_DIRECTORY}/"
	echo "{\"stack\":\"${STACK}\",\"service\":\"${SERVICE}\"}" > "${TARGET_DIRECTORY}/backup.json"
}

usage() {
	echo "======================================================================"
	echo "= Usage"
	echo "======================================================================"
	echo "docker run ipunktbs/xtrabackup -v "name-backup-directory:${TARGET_PREFIX}" [COMMAND]"
	echo ""
	echo "The ipunktbs/xtrabackup docker image tries to provide percona xtrabackup for use in rancher environments"
	echo ""


	echo "======================================================================"
	echo "= Commands"
	echo "======================================================================"
	echo "- backup"
	echo "  Does a backup, prepare, prepare cycle from /var/lib/mysql to ${TARGET_PREFIX}/YY-mm-dd-HH_ii"
	echo "  If the environment variable RUN_EVERY is set then backups will continue to be made, with"
	echo " 'sleep \$RUN_EVERY' in between"
	echo ""
	echo "- restore YY-mm-dd-HH_ii"
	echo "  Does a copy-back ${TARGET_PREFIX}/YY-mm-dd-HH_ii to /var/lib/mysql"
	echo ""
	echo "- run COMMAND"
	echo "  Runs the given command within the container."
}


case $1 in
	backup)


		RUNNING="true"
		while [ "$RUNNING" = "true" ] ; do


			DATE=$(date '+%Y-%m-%d-%H%M%S')
			TARGET="${TARGET_PREFIX}/$DATE"

			echo "======================================================================"
			echo "= Starting backup process to $TARGET"
			echo "======================================================================"
			echo ""

			setDefaults

			if [ ! -d "$TARGET" ] ; then
				echo "$TARGET does not exist yet, creating"
				mkdir -p "$TARGET"
			fi

			echo "Creating backup in $TARGET"

			backupRancher $TARGET

			# Backup - copies innodb files and reads binary log while doing so
			xtrabackup --backup --datadir="$DATA_DIRECTORY" \
				--target-dir="$TARGET" ${USER[@]} ${PASSWORD[@]} \
				--host "$MYSQL_HOST" --port $MYSQL_PORT \
				# First prepare - selfheal innodb and apply binary log to make it consistent
			xtrabackup --prepare --target-dir="$TARGET"
			# Second prepare - write logfiles for faster server startup
			xtrabackup --prepare --target-dir="$TARGET"
			echo "$TARGET Done"

			if [ ! -z "RUN_EVERY" ] ; then

				echo "Sleeping for $RUN_EVERY before starting again"
				sleep "$RUN_EVERY"

			else

				echo "Environment variable RUN_EVERY was not set, not looping"
				RUNNING="false"

			fi


		done 
		;;

	restore)
		shift
		TARGET="${TARGET_PREFIX}/$1"

		echo "======================================================================"
		echo "= Starting restore process from $TARGET"
		echo "======================================================================"
		echo ""

		if [ -z "$1" ] ; then

			usage

			echo "E> Error: no target backup given to"
			exit 1
		fi

		if [ ! -d "$TARGET" ] ; then
			echo "E> Directory '$TARGET' does not exist. Backup restore failed."
			exit 2
		fi

		xtrabackup --copy-back --datadir="$DATA_DIRECTORY" --target-dir="$TARGET"
		echo "Done"

		;;
	clear)
		echo "======================================================================"
		echo "= Starting clear process for /var/lib/mysql"
		echo "======================================================================"
		echo ""

		if [ "$2" != "yes" ] ; then
			echo "Clearing not confirmed. Please add 'yes' as parameter"
			echo "Example: docker run ipunktbs/xtrabackup clear yes"
			exit 1
		fi

		echo "Clearing confirmed, starting"
		rm -Rfv /var/lib/mysql/*
		echo "Done"
		;;
	run)
		shift

		echo "======================================================================"
		echo "= Starting command $*"
		echo "======================================================================"
		echo ""

		$*
		echo "Done"
		;;
	help)
		shift
		usage $*
		exit 0
		exit 0
		;;
	*)
		usage
		exit 0
		;;
esac

