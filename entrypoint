#!/bin/bash

set -e

#
# Backup Mode. Possible values:
# - SIMPLE: Create ${TARGET_PREFIX}/${DATE}
# - FULL: Create ${TARGET_PREFIX}/full-${DATE}
# - INCREMENTAL: Create ${TARGET_PREFIX}/full-{LASTDATE}-inc-${DATE} based on the last full-${DATE}
#
MODE="${MODE:-SIMPLE}"
RUN_EVERY="${RUN_EVERY:-}"
RESTORE_STACK="${RESTORE_STACK:-}"
RANCHER_URL="${RANCHER_URL:-}"
RANCHER_ACCESS_KEY="${RANCHER_ACCESS_KEY}"
RANCHER_SECRET_KEY="${RANCHER_SECRET_KEY}"
BACKUP_VOLUME="${BACKUP_VOLUME:-}"
BACKUP_DRIVER="${BACKUP_DRIVER:-}"
STORAGEBOX_URL="${STORAGEBOX_URL:-}"
STORAGEBOX_USER="${STORAGEBOX_USER:-}"
STORAGEBOX_PASSWORD="${STORAGEBOX_PASSWORD:-}"
MYSQL_PASSWORD="${MYSQL_PASSWORD:-}"
MYSQL_HOST="${MYSQL_HOST:-}"
MYSQL_PORT="${MYSQL_PORT}"
RANCHER_CLI_VERSION="${RANCHER_CLI_VERSION:-v0.4.1}"

TARGET_PREFIX="/target"
DATA_DIRECTORY="/var/lib/mysql"

find_last_full_backup() {
	FILES=( $(ls -d "${TARGET_PREFIX}/"full-????-??-??-??????) )
	echo ${FILES[-1]}
}

download_rancher_compose() {

	RANCHER_COMPOSE_VERSION="$1"

	if [ -z "${RANCHER_COMPOSE_VERSION}" ] ; then
		RANCHER_COMPOSE_VERSION="0.12.2"
	fi

	RANCHER_COMPOSE="rancher-compose-${RANCHER_COMPOSE_VERSION}"
	TARGET_RANCHER_COMPOSE="/usr/local/bin/$RANCHER_COMPOSE"
	if [ ! -f "$TARGET_RANCHER_COMPOSE" ] ; then
		echo "rancher-compose version $RANCHER_COMPOSE_VERSION not found. Downloading."
		curl "https://releases.rancher.com/compose/v${RANCHER_COMPOSE_VERSION}/rancher-compose-linux-amd64-v${RANCHER_COMPOSE_VERSION}.tar.gz" \
			| gunzip | tar -C /tmp -x
		cp /tmp/rancher-compose-v${RANCHER_COMPOSE_VERSION}/rancher-compose "$TARGET_RANCHER_COMPOSE"
		chmod +x "$TARGET_RANCHER_COMPOSE"
		echo "Installed Rancher compose $RANCHER_COMPOSE_VERSION to $TARGET_RANCHER_COMPOSE"
	fi
}

createRestoreService() {

	TARGET_BACKUP="$1"

	if [ -z "${RESTORE_STACK}" ] ; then
		echo "RESTORE_STACK environment variable not set, not creating a restore service"
		return
	fi

	echo "======================================================================"
	echo "= Creating restore service for $TARGET_BACKUP"
	echo "======================================================================"
	echo ""

	OLDDIR=$(pwd)

	cd /tmp/
	curl http://rancher-metadata/2015-12-19/self/service/metadata/docker-compose \
	 	> /tmp/docker-compose.yml.tpl

	ALPHANUM_TARGET_BACKUP=$(echo ${TARGET_BACKUP} | sed -e 's/[^a-zA-Z0-9\-]//g')
	sed \
		-e "s~%%BACKUP%%~$TARGET_BACKUP~" \
		-e "s~%%BACKUP_ALPHANUM%%~$ALPHANUM_TARGET_BACKUP~" \
		-e "s~%%RANCHER_URL%%~${RANCHER_URL}~" \
		-e "s~%%RANCHER_KEY%%~${RANCHER_ACCESS_KEY}~" \
		-e "s~%%RANCHER_SECRET%%~${RANCHER_SECRET_KEY}~" \
		-e "s~%%BACKUP_VOLUME%%~${BACKUP_VOLUME}~" \
		-e "s~%%BACKUP_DRIVER%%~${BACKUP_DRIVER}~" \
		-e "s~%%STORAGEBOX_URL%%~${STORAGEBOX_URL}~" \
		-e "s~%%STORAGEBOX_USER%%~${STORAGEBOX_USER}~" \
		-e "s~%%STORAGEBOX_PASSWORD%%~${STORAGEBOX_PASSWORD}~" \
	  	/tmp/docker-compose.yml.tpl > /tmp/docker-compose.yml
	download_rancher_compose ${RANCHER_COMPOSE_VERSION}

	echo "Using ${RANCHER_COMPOSE} as rancher-compose executable"
	${RANCHER_COMPOSE} -p "${RESTORE_STACK}" create

	cd "$OLDDIR"
}

setDefaults() {
	if [ -z "${MYSQL_USER}" ] ; then
		echo "WARNING: Running with default user."
	else
		echo "Connecting as ${MYSQL_USER}"
		USER=(--user "${MYSQL_USER}")
	fi

	if [ -z "${MYSQL_PASSWORD}" ] ; then
		echo "WARNING: Running without password."
	else
		echo "Connecting with password"
		PASSWORD=(--password "${MYSQL_PASSWORD}")
	fi

	if [ -z "${MYSQL_HOST}" ] ; then

		echo "WARNING: Connecting to default host 'source', make sure to set links"
		MYSQL_HOST="target"
	else
		echo "Connecting to host $MYSQL_HOST"
	fi

	if [ -z "$MYSQL_PORT" ] ; then
		MYSQL_PORT="3306"
		echo "WARNING: Connecting to default port '3306'"
	else
		echo "Connecting to port $MYSQL_PORT"
	fi

}

backupRancher() {

	echo "Backing up rancher stack"

	local METADATA_URL="http://rancher-metadata/2015-07-25"
	local STACK=$(curl -s $METADATA_URL/self/service/links | sed 's/%2F.*//')
	local SERVICE=$(curl -s $METADATA_URL/self/service/links | sed 's/[^%]*%2F//')
	local TARGET_DIRECTORY="$1"

	if [ -z "$RANCHER_URL" -o -z "$RANCHER_ACCESS_KEY" -o -z "$RANCHER_SECRET_KEY" ] ; then
		echo "No rancher access data set, not backing up {docker,rancher}-compose.yml files"
		return
	fi

	RANCHER_CLI_DIRECTORY="/opt/rancher/${RANCHER_CLI_VERSION}"
	if [ ! -d "$RANCHER_CLI_DIRECTORY" ] ; then
		mkdir -p "$RANCHER_CLI_DIRECTORY"
	fi

	if [ ! -f "$RANCHER_CLI_DIRECTORY/rancher" ] ; then
		echo "Downloading rancher cli $RANCHER_CLI_VERSION"
		curl -s "https://releases.rancher.com/cli/${RANCHER_CLI_VERSION}/rancher-linux-amd64-${RANCHER_CLI_VERSION}.tar.gz" \
			| tar xvz -C "$RANCHER_CLI_DIRECTORY" --strip-components=2
	fi

	$RANCHER_CLI_DIRECTORY/rancher export "${STACK}"
	cp ${STACK}/{docker,rancher}-compose.yml "${TARGET_DIRECTORY}/"
	echo "{\"stack\":\"${STACK}\",\"service\":\"${SERVICE}\"}" > "${TARGET_DIRECTORY}/backup.json"
}

usage() {
	echo "======================================================================"
	echo "= Usage"
	echo "======================================================================"
	echo "docker run ipunktbs/xtrabackup -v "name-backup-directory:${TARGET_PREFIX}" [COMMAND]"
	echo ""
	echo "The ipunktbs/xtrabackup docker image tries to provide percona xtrabackup for use in rancher environments"
	echo ""


	echo "======================================================================"
	echo "= Commands"
	echo "======================================================================"
	echo "- backup"
	echo "  Does a backup, prepare, prepare cycle from /var/lib/mysql to ${TARGET_PREFIX}/YY-mm-dd-HH_ii"
	echo "  If the environment variable RUN_EVERY is set then backups will continue to be made, with"
	echo " 'sleep \$RUN_EVERY' in between"
	echo ""
	echo "- restore YY-mm-dd-HH_ii"
	echo "  Does a copy-back ${TARGET_PREFIX}/YY-mm-dd-HH_ii to /var/lib/mysql"
	echo ""
	echo "- run COMMAND"
	echo "  Runs the given command within the container."
}

backup() {

	RUNNING="true"
	while [ x"$RUNNING" = x"true" ] ; do

		DATE=$(date '+%Y-%m-%d-%H%M%S')
		NAME="${DATE}"

		if [ x"${MODE}" = x"FULL" ] ; then
			echo "======================================================================"
			echo "= Full backup process"
			echo "======================================================================"
			echo ""

			NAME="full-${DATE}"
		fi

		if [ x"${MODE}" = x"INCREMENTAL" ] ; then
			echo "======================================================================"
			echo "= Incremental backup process"
			echo "======================================================================"
			echo ""
			BASE_BACKUP="$(find_last_full_backup)"
			BASE_PATH="${TARGET_PREFIX}/${BASE_BACKUP}"
			NAME="full-${BASE_BACKUP}-inc-$DATE"
			echo "Base backup: ${BASE_BACKUP}"
			echo ""
		fi

		TARGET="${TARGET_PREFIX}/$NAME"

		echo "======================================================================"
		echo "= Starting backup process to $TARGET"
		echo "======================================================================"
		echo ""

		setDefaults

		if [ ! -d "$TARGET" ] ; then
			echo "$TARGET does not exist yet, creating"
			mkdir -p "$TARGET"
		fi

		echo "Creating backup in $TARGET"

		backupRancher $TARGET

		if [ x"${MODE}" = x"INCREMENTAL" ] ; then
			# Backup - copies innodb files and reads binary log while doing so
			xtrabackup --backup --datadir="$DATA_DIRECTORY" \
				--incremental-basedir="${BASE_PATH}" \
				--target-dir="$TARGET" ${USER[@]} ${PASSWORD[@]} \
				--host "${MYSQL_HOST}" --port ${MYSQL_PORT}
		else
			# Backup - copies innodb files and reads binary log while doing so
			xtrabackup --backup --datadir="$DATA_DIRECTORY" \
				--target-dir="$TARGET" ${USER[@]} ${PASSWORD[@]} \
				--host "${MYSQL_HOST}" --port ${MYSQL_PORT}
		fi

		if [ x"${MODE}" = x"SIMPLE" ] ; then
			echo "Mode is SIMPLE, preparing backups"

			# First prepare - selfheal innodb and apply binary log to make it consistent
			xtrabackup --prepare --target-dir="$TARGET"
			# Second prepare - write logfiles for faster server startup
			xtrabackup --prepare --target-dir="$TARGET"
		fi
		echo "$TARGET Done"

		createRestoreService "$NAME"

		if [ ! -z "${RUN_EVERY}" ] ; then

			echo "Sleeping for ${RUN_EVERY} before starting again"
			sleep "${RUN_EVERY}"

		else

			echo "Environment variable RUN_EVERY was not set, not looping"
			RUNNING="false"

		fi


	done
}

case $1 in
	backup)

		backup
	;;
	restore)
		shift
		TARGET="${TARGET_PREFIX}/$1"

		echo "======================================================================"
		echo "= Starting restore process from $TARGET"
		echo "======================================================================"
		echo ""

		if [ -z "$1" ] ; then

			usage

			echo "E> Error: no target backup given to"
			exit 1
		fi

		if [ ! -d "$TARGET" ] ; then
			echo "E> Directory '$TARGET' does not exist. Backup restore failed."
			exit 2
		fi

		xtrabackup --copy-back --datadir="$DATA_DIRECTORY" --target-dir="$TARGET"
		echo "Done"

		;;
	create)
		shift
		TARGET="$1"

		echo "======================================================================"
		echo "= Creating restore service from $TARGET"
		echo "======================================================================"
		echo ""

		createRestoreService "$TARGET"
		;;

	clear)
		echo "======================================================================"
		echo "= Starting clear process for /var/lib/mysql"
		echo "======================================================================"
		echo ""

		if [ "$2" != "yes" ] ; then
			echo "Clearing not confirmed. Please add 'yes' as parameter"
			echo "Example: docker run ipunktbs/xtrabackup clear yes"
			exit 1
		fi

		echo "Clearing confirmed, starting"
		rm -Rfv /var/lib/mysql/*
		echo "Done"
		;;
	cleanup)
		echo "======================================================================"
		echo "= Clean up expired backups from $TARGET"
		echo "======================================================================"
		echo ""

		FILES=( $(ls -d $TARGET/full-????-??-??-??????) )
		exit 0
		;;
	run)
		shift

		echo "======================================================================"
		echo "= Starting command $*"
		echo "======================================================================"
		echo ""

		$*
		echo "Done"
		exit 0
		;;
	help)
		shift
		usage
		exit 0
		;;
	*)
		usage
		exit 0
		;;
esac

